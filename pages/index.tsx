import Head from 'next/head';
import {useMutation, useQuery} from '@tanstack/react-query';
import Footer from '../components/footer';
import {FC, useEffect, useState} from 'react';
import fetchPhoneticTranslation from '../requests/fetch-phonetic-translation';
import getTranslationWithMlReplacements from "../utilities/get-ml-translation";

const SelectWord: FC<{ wordSet: string[], wordId: string, colour: string }> = ({
                                                                                   wordSet,
                                                                                   wordId,
                                                                                   colour
                                                                               }) => {
    const [selectedWordIndex, setSelectedWordIndex] = useState(0)
    const [showWordChoices, setShowWordChoices] = useState(false)

    const toggleWordChoices = () => {
        setShowWordChoices(prevState => !prevState);
    };

    const handleSelectWord = (i: number) => () => {
        setSelectedWordIndex(i);
        setShowWordChoices(false);
    };

    return (
        <div className='inline relative'>
            <button onClick={toggleWordChoices}
                    className={colour}>{wordSet[selectedWordIndex]}</button>
            {showWordChoices
                ? (
                    <div className='absolute w-auto top-5 left-0 bg-gray-200 shadow z-10'>
                        {wordSet.map((word, i) =>
                            <button
                                key={`${wordId}_${word}`}
                                onClick={handleSelectWord(i)}
                                className='whitespace-nowrap bg-gray-200 block w-auto min-w-full p-1 border-b border-b-gray-300 hover:bg-gray-400 last-of-type:border-0'
                            >
                                {word}
                            </button>
                        )}
                    </div>
                )
                : null}
        </div>
    );
};


const Home = () => {
    let timer;
    const [text, setText] = useState('');
    const [languageCode, setLanguageCode] = useState('en_UK');

    const {data, isError, error, isSuccess} = useQuery({
        queryKey: ['translation', text, languageCode],
        queryFn: () => fetchPhoneticTranslation(languageCode, text),
        initialData: {translation: []}
    });

    const mutation = useMutation({
        mutationFn: (translation: string[][]) => getTranslationWithMlReplacements(translation),
    })

    const handleInput = (event) => {
        clearTimeout(timer);
        const newText = event.target.value;
        timer = setTimeout(() => {
            setText(newText);
        }, 400);
    };

    const handleSelect = (event) => {
        setLanguageCode(event.target.value);
    };

    useEffect(() => {
        if (languageCode !== 'en_UK' || !data.translation || !data.translation.length) return;
        mutation.mutate(data.translation);
    }, [data, languageCode]);

    return (
        <div className="flex flex-col h-full">
            <Head>
                <title>Phonetic Translator</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className="px-20 py-10 max-w-[80ch]">
                <h1 className='text-2xl'>Phonetic Translator</h1>
                <div className="my-4">
                    <label
                        htmlFor="countries"
                        className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >Select a Language</label>
                    <select
                        onChange={handleSelect}
                        defaultValue='en_UK'
                        id="countries"
                        className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                    >
                        <option value="en_UK">English</option>
                        <option value="de">German</option>
                        <option value="fr_FR">French</option>
                        <option value="es_ES">Spanish</option>
                        <option value="sv">Swedish</option>
                        <option value="it">Italian</option>
                        <option value="da">Danish</option>
                        <option value="fi">Finnish</option>
                        <option value="hu">Hungarian</option>
                        <option value="is">Icelandic</option>
                        <option value="el">Greek</option>
                        <option value="ru">Russian</option>
                        <option value="yi">Yiddish</option>
                        <option value="la">Latin</option>
                    </select>
                </div>
                <div className="my-4">
                    <label
                        htmlFor="input"
                        className="block mb-2 text-sm font-medium text-gray-900"
                    >Input</label>
                    <textarea
                        id="input"
                        onChange={handleInput}
                        className="min-h-[260px] block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Enter text to translate"
                    />
                </div>
                <div className="my-4">
                    <>
                        <label
                            className="block mb-2 text-sm font-medium text-gray-900"
                        >Output</label>
                        <div
                            className="min-h-[260px] block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 outline-none focus:outline-none"
                        >
                            {isSuccess ? (data?.translation).map(
                                (wordSet, i) => {
                                    const lastWord = wordSet.at(-1);
                                    const isNonMatched = lastWord[0] === '#' && lastWord.at(-1) === '#';
                                    const isAiTransliteration = isNonMatched && wordSet.length > 1;
                                    const colour = isAiTransliteration
                                        ? 'text-green-600'
                                        : isNonMatched
                                            ? 'text-red-600'
                                            : wordSet.length > 1
                                                ? 'text-blue-600'
                                                : '';
                                    return (wordSet.length === 1
                                            ? <span key={`w_${i}`} className={colour}>{wordSet}</span>
                                            : <SelectWord
                                                key={`w_${i}`}
                                                wordId={`w_${i}`}
                                                wordSet={wordSet}
                                                colour={colour}
                                            />
                                    );
                                }) : null}
                        </div>
                    </>
                </div>
                <div className={'my-10'}>
                    <h3 className='font-bold'>Key</h3>
                    <ul>
                        <li>
                            <span className='text-blue-400'>Blue</span> highlighted text has alternate pronunciations,
                            click on the text to view and select them.
                        </li>
                        <li>
                            <span className='text-red-400'>Red</span> highlighted text has no dictionary look and may
                            have been transliterated using phoneme rules, provided such rules are available for the
                            particular language.
                        </li>
                        <li>
                            <span className='text-green-400'>Green</span> highlighted text has no dictionary look up and
                            has used a machine learning model to generate the transliteration.
                        </li>
                    </ul>
                </div>
            </main>
            <Footer/>
        </div>
    );
};

export default Home

import Head from 'next/head';
import {useMutation, useQuery} from '@tanstack/react-query';
import Footer from '../components/footer';
import React, {FC, useEffect, useState} from 'react';
import fetchPhoneticTranslation, {Transliteration} from '../requests/fetch-phonetic-translation';
import getTranslationWithMlReplacements from "../utilities/get-ml-translation";
import TransliteratorKey from "../components/tranliterator-key";
import SelectWord from "../components/select-word";

const SelectLanguage: FC<{ onChange: (event) => void }> = ({onChange}) =>
    <div className="my-4">
        <label
            htmlFor="countries"
            className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
        >Select a Language</label>
        <select
            onChange={onChange}
            defaultValue="en_UK"
            id="countries"
            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
        >
            <option value="en_UK">English (UK)</option>
            <option value="en_US">English (American)</option>
            <option value="de">German</option>
            <option value="fr_FR">French</option>
            <option value="es_ES">Spanish</option>
            <option value="sv">Swedish</option>
            <option value="it">Italian</option>
            <option value="da">Danish</option>
            <option value="fi">Finnish</option>
            <option value="hu">Hungarian</option>
            <option value="is">Icelandic</option>
            <option value="el">Greek</option>
            <option value="ru">Russian</option>
            <option value="yi">Yiddish</option>
            <option value="la">Latin</option>
        </select>
    </div>;

const Home = () => {
    let timer;
    const [text, setText] = useState('');
    const [languageCode, setLanguageCode] = useState('en_UK');

    const {data, isError, error, isSuccess} = useQuery({
        queryKey: ['translation', text, languageCode],
        queryFn: () => fetchPhoneticTranslation(languageCode, text),
        initialData: {translation: []}
    });

    const mutation = useMutation({
        mutationFn: (translation: Transliteration) => getTranslationWithMlReplacements(languageCode, translation),
    })

    const handleInput = (event) => {
        clearTimeout(timer);
        const newText = event.target.value;
        timer = setTimeout(() => {
            setText(newText);
        }, 400);
    };

    const handleSelect = (event) => {
        setLanguageCode(event.target.value);
    };

    useEffect(() => {
        if (
            !["de", "en_UK", "fr_FR"].includes(languageCode) ||
            !data.translation ||
            !data.translation.length
        ) return;
        mutation.mutate(data.translation);
    }, [data, languageCode]);

    return (
        <div className="flex flex-col h-full">
            <Head>
                <title>Phonetic Translator</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className="px-20 py-10 max-w-[80ch]">
                <h1 className='text-2xl'>Phonetic Translator</h1>
                <SelectLanguage onChange={handleSelect}/>
                <div className="my-4">
                    <label
                        htmlFor="input"
                        className="block mb-2 text-sm font-medium text-gray-900"
                    >Input</label>
                    <textarea
                        id="input"
                        onChange={handleInput}
                        className="min-h-[260px] block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Enter text to translate"
                    />
                </div>
                <div className="my-4">
                    <label className="block mb-2 text-sm font-medium text-gray-900">
                        Output
                    </label>
                    <div
                        className="min-h-[260px] block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 outline-none focus:outline-none"
                    >
                        {isSuccess ? (data?.translation).map(
                            (transliteration, i) => {
                                const isRule = transliteration.type === 'rule';
                                const isLookup = transliteration.type === 'lookup';
                                const isChar = transliteration.type === 'char';
                                const colour = isRule && transliteration.phonetics.length > 1
                                    ? 'text-green-600'
                                    : isRule
                                        ? 'text-red-600'
                                        : isLookup && transliteration.phonetics.length > 1
                                            ? 'text-blue-600'
                                            : '';
                                return isChar ? <>{transliteration.char}</> : (
                                    transliteration.phonetics.length === 1
                                        ? <span key={`w_${i}`} className={colour}>{transliteration.phonetics[0]}</span>
                                        : <SelectWord
                                            key={`w_${i}`}
                                            wordId={`w_${i}`}
                                            phonetics={transliteration}
                                            colour={colour}
                                        />
                                );
                            }) : null}
                    </div>
                </div>
                <TransliteratorKey/>
            </main>
            <Footer/>
        </div>
    );
};

export default Home
